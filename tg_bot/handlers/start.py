from aiogram import types, Dispatcher
from tg_bot.keyboards.reply import kb_menu, get_kb_menu, get_back
from aiogram.dispatcher.filters import Text
from tg_bot.service.database import DBCommands, create_db, Item
from tg_bot.service import database
from tg_bot.config import load_config, PAYMENT_TOKEN
from aiogram import Bot
import asyncio
from aiogram.utils.callback_data import CallbackData
from aiogram.dispatcher import FSMContext
import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice, PreCheckoutQuery, ShippingQuery, \
    ShippingOption, ReplyKeyboardMarkup, KeyboardButton
from tg_bot.misc import states
from aiogram.types.message import ContentType
from tg_bot.keyboards.inline import menu_cart, pay_cash_or_card
from tg_bot.models.shipping import POST_REGULAR_SHIPPING
import pytz

bot = Bot
db = DBCommands()
config = load_config()
buy_item = CallbackData("buy", "item_id")


async def cmd_start(call: types.CallbackQuery):
    with open('arc.jpg', 'rb') as photo:
        await create_db()

        chat_id = call.from_user.id
        await db.add_new_user()
        await call.bot.send_photo(chat_id=chat_id,
                                  photo=photo,
                                  caption=f'<b>–í—ñ—Ç–∞—é –í–∞—Å {call.from_user.full_name}!\n'
                                          "–í–æ–¥–∞ ¬´Arcadia¬ª, –∑–∞–≤–¥—è–∫–∏ –ø—Ä–∏—Ä–æ–¥–Ω–æ–º—É –ø–æ—Ö–æ–¥–∂–µ–Ω–Ω—é –Ω–∞—à–æ—ó –≤–æ–¥–∏, –≤–æ–Ω–∞ –Ω–µ "
                                          "–ø—Ä–æ—Å—Ç–æ —Å–º–∞—á–Ω–∞"
                                          "—Å–∞–º–∞ –ø–æ —Å–æ–±—ñ, –∞ –π –¥–∞—Ä—É—î"
                                          "–Ω–µ–∑–∞–±—É—Ç–Ω—ñ–π —Å–º–∞–∫ —É—Å—ñ–º –≤–∞—à–∏–º —Å—Ç—Ä–∞–≤–∞–º —Ç–∞ –Ω–∞–ø–æ—è–º.</b>\n "
                                          "\n"
                                          "–ö–æ–º–ø–∞–Ω—ñ—è –∑–∞—Å–Ω–æ–≤–∞–Ω–∞ —É –∫–≤—ñ—Ç–Ω—ñ —Ü—å–æ–≥–æ —Ä–æ–∫—É. –ó–∞–≤–¥—è–∫–∏ —Ä–µ—Ç–µ–ª—å–Ω—ñ–π —Ç–∞ –≥–ª–∏–±–æ–∫—ñ–π "
                                          "–æ—á–∏—Å—Ç—Ü—ñ"
                                          "–≤–æ–¥–∞ Arcadia —Å–º–∞–∫—É—î —Ç–∞–∫, –Ω–∞—á–µ –ø º—î—Ç–µ —ó—ó –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –∑ –¥–∂–µ—Ä–µ–ª–∞. "
                                          "–ì–æ—Ç—É–π—Ç–µ —Å–º–∞—á–Ω—ñ –Ω–∞–ø–æ—ó —Ç–∞ —Ä–æ–∑–∫—Ä–∏–π—Ç–µ —Å–º–∞–∫ –≤–∞—à–∏—Ö —Å—Ç—Ä–∞–≤, –ø—ñ–¥—Ç—Ä–∏–º—É–π—Ç–µ –≤–æ–¥–Ω–∏–π "
                                          "–±–∞–ª–∞–Ω—Å"
                                          "—Ç–∞ –≤—Ç–∞–º–æ–≤—É–π—Ç–µ —Å–ø—Ä–∞–≥—É. "
                                          "–ú–∏ –Ω–∞–±–∏—Ä–∞—î–º–æ —Å–≤—ñ–∂—É –∫—Ä–∏—à—Ç–∞–ª–µ–≤–æ —á–∏—Å—Ç—É –≤–æ–¥—É —É –ø–ª—è—à–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–æ—é "
                                          "–≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é.–î–æ—Å—Ç–∞–≤–ª—è—î–º–æ –ø–æ –º—ñ—Å—Ç—É! "
                                  , reply_markup=kb_menu())


async def cmd_menu(call: types.CallbackQuery):
    await call.message.answer('–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –º–µ–Ω—é', reply_markup=get_kb_menu())


async def show_items(call: types.CallbackQuery):
    all_items = await db.show_items()
    text = "<b>–¢–æ–≤–∞—Ä:</b> {name}\n" \
           "<b>–û–ø–∏—Å:</b> {description}\n" \
           "<b>–¶—ñ–Ω–∞:</b> \t{price:,} UAH\n"
    for item in all_items:
        markup = types.InlineKeyboardMarkup(inline_keyboard=[[
            types.InlineKeyboardButton("‚òëÔ∏è –ó–∞–º–æ–≤–∏—Ç–∏", callback_data=buy_item.new(item_id=item.id))
        ]])
        await call.bot.send_photo(chat_id=call.from_user.id,
                                  photo=item.photo,
                                  caption=text.format(id=item.id,
                                                      name=item.name,
                                                      description=item.description,
                                                      price=item.price / 100),
                                  reply_markup=markup
                                  )
        await asyncio.sleep(0.33)
    await call.message.answer('–•–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å <b>"H–∞–∑–∞–¥ —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"</b>',
                              reply_markup=get_back())


async def empty_cart(call: types.CallbackQuery):
    user_id = call.from_user.id
    sticker = "CAACAgEAAxkBAAEJ7N9kzWIUHWUvKjjuDieMJBrJoqWegQACDwIAAlCNKEcb6ebEddn2-i8E"
    await db.empty_cart(user_id)
    await call.bot.send_sticker(chat_id=call.from_user.id, sticker=sticker)
    await call.message.answer("–í–∞—à –∫–æ—à–∏–∫ –ø–æ—Ä–æ–∂–Ω—ñ–π...", )


async def buying(call: types.CallbackQuery, callback_data: dict, state: FSMContext):
    item_id = int(callback_data.get("item_id"))
    await call.message.edit_reply_markup()
    item = await database.Item.get(item_id)
    if not item:
        await call.message.answer("–¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ–º–∞—î")
        return
    text = "–ë–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ <b>{name}</b>\n" \
           "–∑–∞ —Ü—ñ–Ω–æ—é <b>{price:,}</b> UAH\n" \
           "–í–≤–µ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: ".format(name=item.name,
                                               price=item.price / 100)
    await call.message.answer(text)
    await states.Purchase.EnterQuantity.set()
    await state.update_data(
        item=item,
        purchase=database.Purchase(
            item_id=item_id,
            purchase_time=datetime.datetime.now(),
            buyer=call.from_user.id,
            name=item.name
        )
    )


async def enter_quantity(message: types.Message, state: FSMContext):
    quantity = int(message.text)
    async with state.proxy() as data:
        data["purchase"].quantity = quantity
        item = data.get("item")
        amount = item.price * quantity
        data["purchase"].amount = amount

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="‚òëÔ∏è –î–æ–¥–∞—Ç–∏ —É –∫–æ—à–∏–∫",
                callback_data="agree")],
        [
            InlineKeyboardButton(text="üîÅ –í–≤–µ—Å—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–Ω–æ–≤—É",
                                 callback_data="change")
        ], [
            InlineKeyboardButton(
                text="‚ùå –í—ñ–¥–º—ñ–Ω–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è",
                callback_data="cancel")
        ]])

    await states.Purchase.Approval.set()

    await message.answer(
        "–î–æ–±—Ä–µ, –±–∞–∂–∞—î—Ç–µ –∫—É–ø–∏—Ç–∏ {quantity} —à—Ç. <b>{name}</b> –∑–∞ —Ü—ñ–Ω–æ—é <b>{price:,} UAH</b>\n"
        "–í–∏–π–¥–µ <b>{amount:,} UAH</b>. –í–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É–π—Ç–µ ?".format(
            quantity=quantity,
            name=item.name,
            amount=amount / 100,
            price=item.price / 100
        ),
        reply_markup=markup)
    await states.Purchase.Approval.set()


# –¢–æ, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º - –Ω–µ –ø–æ–ø–∞–ª–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ö–µ–Ω–¥–ª–µ—Ä –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ —ç—Ç–æ—Ç
async def not_quantity(message: types.Message):
    await message.answer("–ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ")


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∏—Ç—å –≤–æ –≤—Ä–µ–º—è –ø–æ–∫—É–ø–∫–∏ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ
async def approval(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call.message.answer("–í–∏ –≤—ñ–¥–º—ñ–Ω–∏–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", reply_markup=get_back())
    await state.reset_state()


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª "–≤–≤–µ—Å—Ç–∏ –∑–∞–Ω–æ–≤–æ"
async def again(call: types.CallbackQuery):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
    await call.message.answer("–í–≤–µ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –∑–Ω–æ–≤—É.")
    await states.Purchase.EnterQuantity.set()


# –ï—Å–ª–∏ —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∞–ª "—Å–æ–≥–ª–∞—Å–µ–Ω"
async def enter_agree(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_reply_markup()  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏

    data = await state.get_data()
    purchase = data.get("purchase")
    item = data.get("item")
    # –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤–Ω–µ—Å—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ .create()
    await purchase.create()
    await call.message.answer('–î–æ–±—Ä–µ! –Ø–∫—â–æ –±–∞–∂–∞—î—Ç–µ –∑–∞–º–æ–≤–∏—Ç–∏ —â–µ —Ç–æ–≤–∞—Ä, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏—â–µ,\n'
                              ' –∞–±–æ –ø–µ—Ä–µ–π–¥–∏—Ç—å —É <b>"–ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞"</b> –¥–ª—è —Å–ø–ª–∞—Ç–∏ —Ç–æ–≤–∞—Ä—É ',
                              reply_markup=InlineKeyboardMarkup(
                                  inline_keyboard=[[
                                      InlineKeyboardButton("üèÅ –û—Ñ–æ—Ä–º–∏—Ç—å —â–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="do_order"),
                                      InlineKeyboardButton("üõí –ú—ñ–π –∫–æ—à–∏–∫", callback_data="my_cart")
                                  ]]
                              ))
    await state.reset_state()


# –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
async def check_pay(call: types.CallbackQuery):
    await call.message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –∑–∞—Å—ñ–± –æ–ø–ª–∞—Ç–∏", reply_markup=pay_cash_or_card())


# –ú–æ—è –∫–æ—Ä–∑–∏–Ω–∞
async def my_cart(call: types.CallbackQuery):
    user_id = call.from_user.id
    summa = 0
    all_cart = await db.show_cart(user_id)
    all_items_text = "üõí –ö–æ—à–∏–∫:\n" \
                     "\n"
    for num, cart in enumerate(all_cart, start=1):
        amount = cart.amount / 100
        summa += amount
        all_items_text += f"{num} {cart.name} = {amount} UAH\n"
    await call.message.answer(all_items_text)
    await call.message.answer(f"üíµ –í—Å—å–æ–≥–æ: {summa}UAH", reply_markup=menu_cart())


# –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def pay_cash(call: types.CallbackQuery):
    await call.message.answer("–ë–∞–∂–∞—î—Ç–µ —Ä–∞–∑—Ä–∞—Ö—É–≤–∞—Ç–∏—Å—å <b>–≥–æ—Ç—ñ–≤–∫–æ—é</b> –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É, –≤–≤–µ–¥–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ñ —Ç–∞ –∞–¥—Ä–µ—Å—É"
                              "–¥–æ—Å—Ç–∞–≤–∫–∏")
    await states.OrderItems.Name.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç—å —Å–≤–æ—î —ñ–º'—è:")


# –†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –∏–º—è
async def pay_cash_name(message: types.Message, state: FSMContext):
    name = message.text
    register = states.OrderItems()
    register.name = name
    await states.OrderItems.next()
    await state.update_data(register=register)
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ")


# —Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª.
async def pay_cash_phone(message: types.Message, state: FSMContext):
    if all(c.isdigit() or c == "+" for c in message.text):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª +
        phone = message.text
        data = await state.get_data()
        register = data.get("register")
        register.phone = phone
        await state.update_data(register=register)
        await states.OrderItems.next()
        await message.answer("–í–≤–µ–¥–∏—ñ—Ç—å —Å–≤–æ—é –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç—å –≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä")


# –†–µ–≥–µ—Å—Ç—Ä–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å
async def pay_cash_adress(message: types.Message, state: FSMContext):
    adress = message.text
    data = await state.get_data()
    register = data.get("register")
    register.adress = adress
    await state.update_data(register=register)

    text = f"–í–∞–º –ø—Ä–∏–π—à–æ–≤ –∑–∞–∫–∞–∑:\n" \
           f"–î–∞—Ç–∞: {datetime.datetime.now(tz=pytz.timezone('Europe/Kiev'))}\n" \
           f"–í–∞—à–µ —ñ–º'—è: {register.name}\n" \
           f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {register.phone}\n" \
           f"–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞: {register.adress}\n" \
           f"<b>–û–ø–ª–∞—Ç–∞ –≥–æ—Ç—ñ–≤–∫–æ—é</b>"

    await message.bot.send_sticker(chat_id=message.from_user.id,
                                   sticker="CAACAgIAAxkBAAEJ7nNkzq1jPENuM1E0IY9osPMRyBpwWwACogEAAhZCawqhd3djmk6DIS8E")
    await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
                         "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—Å—è –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏—â–∏–º —á–∞—Å–æ–º")

    user_id = message.from_user.id
    summa = 0
    all_cart = await db.show_cart(user_id)
    all_items_text = "–¢–æ–≤–∞—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" \
                     "\n"
    for num, cart in enumerate(all_cart, start=1):
        amount = cart.amount / 100
        summa += amount
        all_items_text += f"{num} {cart.name} = {amount} UAH\n"

    for admin in config.tg_bot.admin_ids:
        await message.bot.send_message(chat_id=admin, text=text)
        await message.bot.send_message(chat_id=admin, text=all_items_text)
        await message.bot.send_message(chat_id=admin, text=f"üíµ –í—Å—å–æ–≥–æ: {summa}UAH")

        # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        await db.empty_cart(user_id)
        # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.reset_state()

    return


# –û–ø–ª–∞—Ç–∞ –∫—É—Ä—å–µ—Ä—É –∫–∞—Ä—Ç–æ—á–∫–æ–π, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
async def pay_card_cur(call: types.CallbackQuery):
    await call.message.answer("–ë–∞–∂–∞—î—Ç–µ —Ä–∞–∑—Ä–∞—Ö—É–≤–∞—Ç–∏—Å—å <b>–∫–∞—Ä—Ç–∫–æ—é</b> –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ç–æ–≤–∞—Ä—É, –≤–≤–µ–¥–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ñ —Ç–∞ –∞–¥—Ä–µ—Å—É "
                              "–¥–æ—Å—Ç–∞–≤–∫–∏")
    await states.OrderCard.Name_card.set()
    await call.message.answer("–í–≤–µ–¥–∏—Ç—å —Å–≤–æ—î —ñ–º'—è:")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º—è
async def pay_card_name(message: types.Message, state: FSMContext):
    name = message.text
    register = states.OrderCard()
    register.name = name
    await states.OrderCard.next()
    await state.update_data(register=register)
    await message.reply("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: ")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
async def pay_card_phone(message: types.Message, state: FSMContext):
    if all(c.isdigit() or c == "+" for c in message.text):  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ü–∏—Ñ—Ä—ã –∏ —Å–∏–º–≤–æ–ª +
        phone = message.text
        data = await state.get_data()
        register = data.get("register")
        register.phone = phone
        await state.update_data(register=register)
        await states.OrderCard.next()
        await message.answer("–í–≤–µ–¥–∏—ñ—Ç—å —Å–≤–æ—é –∞–¥—Ä–µ—Å—É –¥–æ—Å—Ç–∞–≤–∫–∏:")
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç—å –≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä")


# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞
async def pay_card_adress(message: types.Message, state: FSMContext):
    adress = message.text
    data = await state.get_data()
    register = data.get("register")
    register.adress = adress
    await state.update_data(register=register)

    text = f"–í–∞–º –ø—Ä–∏–π—à–æ–≤ –∑–∞–∫–∞–∑:\n" \
           f"–î–∞—Ç–∞: {datetime.datetime.now(tz=pytz.timezone('Europe/Kiev'))}\n" \
           f"–í–∞—à–µ —ñ–º'—è: {register.name}\n" \
           f"–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {register.phone}\n" \
           f"–í–∞—à–∞ –∞–¥—Ä–µ—Å–∞: {register.adress}\n" \
           f"<b>–û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–∫–æ—é, –±—É–¥—å –ª–∞—Å–∫–∞ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –≤–∑—è—Ç–∏ —Ç–µ—Ä–º—ñ–Ω–∞–ª</b>"

    await message.bot.send_sticker(chat_id=message.from_user.id,
                                   sticker="CAACAgIAAxkBAAEJ7nNkzq1jPENuM1E0IY9osPMRyBpwWwACogEAAhZCawqhd3djmk6DIS8E")
    await message.answer("–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
                         "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—Å—è –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏—â–∏–º —á–∞—Å–æ–º")

    user_id = message.from_user.id
    summa = 0
    all_cart = await db.show_cart(user_id)
    all_items_text = "–¢–æ–≤–∞—Ä–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" \
                     "\n"
    for num, cart in enumerate(all_cart, start=1):
        amount = cart.amount / 100
        summa += amount
        all_items_text += f"{num} {cart.name} = {amount} UAH\n"

    for admin in config.tg_bot.admin_ids:
        await message.bot.send_message(chat_id=admin, text=text)
        await message.bot.send_message(chat_id=admin, text=all_items_text)
        await message.bot.send_message(chat_id=admin, text=f"üíµ –í—Å—å–æ–≥–æ: {summa}UAH")

        # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        await db.empty_cart(user_id)
        # –°–±—Ä–æ—Å–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.reset_state()


# –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç
async def pay(call: types.CallbackQuery):
    user_id = call.from_user.id
    summa = 0
    all_cart = await db.show_cart(user_id)

    for cart in all_cart:
        amount = cart.amount
        summa += amount
    prices = [LabeledPrice(label="Arcadia", amount=summa)]

    await call.bot.send_invoice(chat_id=call.from_user.id,
                                title="Arcadia",
                                description="–î–æ—Å—Ç–∞–≤–∫–∞ –≤–æ–¥–∏",
                                payload="some",
                                start_parameter="example",
                                currency="UAH",
                                prices=prices,
                                provider_token=PAYMENT_TOKEN,
                                need_name=True,
                                need_phone_number=True,
                                need_email=False,
                                need_shipping_address=True,
                                is_flexible=True
                                )


# –î–æ—Å—Ç–∞–≤–∫–∞
async def choose_shipping_city(query: ShippingQuery):
    if query.shipping_address.city == "–û–¥–µ—Å—Å–∞" or "–û–¥–µ—Å–∞":
        await query.bot.answer_shipping_query(
            shipping_query_id=query.id,
            shipping_options=[POST_REGULAR_SHIPPING],
            ok=True)
    elif not query.shipping_address.city == "–û–¥–µ—Å—Å–∞" or "–û–¥–µ—Å–∞":
        await query.bot.answer_shipping_query(shipping_query_id=query.id,
                                              ok=False,
                                              error_message="–£ —Ü–µ –º—ñ—Å—Ç–æ –Ω–µ –¥–æ—Å—Ç–∞–≤–ª—è—î–º–æ, –ø—Ä–∞—Ü—é—î–º —Ç—ñ–ª—å–∫—ñ –ø–æ –û–¥–µ—Å—ñ")


async def checkout(query: PreCheckoutQuery):
    user_id = query.from_user.id
    await query.bot.answer_pre_checkout_query(pre_checkout_query_id=query.id, ok=True)
    all_cart = await db.show_cart(user_id)
    all_items_text = "–í–∏ –æ—Ç—Ä–∏–º–∞–ª–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n" \
                     "\n"
    for num, cart in enumerate(all_cart, start=1):
        amount = cart.amount / 100
        all_items_text += f"{num} {cart.name} = {amount} UAH\n"

    await query.bot.send_sticker(chat_id=query.from_user.id,
                                 sticker="CAACAgIAAxkBAAEJ7nNkzq1jPENuM1E0IY9osPMRyBpwWwACogEAAhZCawqhd3djmk6DIS8E")
    await query.bot.send_message(chat_id=query.from_user.id, text=f"–í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ.\n"
                                                                  "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –∑–≤'—è–∂–µ—Ç—Å—è –∑ –í–∞–º–∏ –Ω–∞–π–±–ª–∏—â–∏–º —á–∞—Å–æ–º")

    for admin in config.tg_bot.admin_ids:
        await query.bot.send_message(chat_id=admin,
                                     text=f'–î–∞—Ç–∞: {datetime.datetime.now(tz=pytz.timezone("Europe/Kiev"))}\n'
                                          f"–¢–æ–≤–∞—Ä: {all_items_text}\n"
                                          f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É: {query.order_info.phone_number}\n"
                                          f"–ê–¥—Ä–µ—Å–∞: {query.order_info.shipping_address.city}, "
                                          f"{query.order_info.shipping_address.street_line1}\n"
                                          f"–°—É–º–∞: {query.total_amount / 100} UAH")

    # –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
    await db.empty_cart(user_id)


def register_start(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"])
    dp.register_callback_query_handler(cmd_menu, text="general_menu")
    dp.register_callback_query_handler(show_items, text="do_order")
    dp.register_callback_query_handler(empty_cart, text="reset_cart")
    dp.register_callback_query_handler(buying, buy_item.filter())
    dp.register_message_handler(enter_quantity, regexp=r"^(\d+)$", state=states.Purchase.EnterQuantity)
    dp.register_message_handler(not_quantity, state=states.Purchase.EnterQuantity)
    dp.register_callback_query_handler(approval, text_contains="cancel", state=states.Purchase)
    dp.register_callback_query_handler(again, text_contains="change", state=states.Purchase.Approval)
    dp.register_callback_query_handler(enter_agree, text_contains="agree", state=states.Purchase.Approval)
    dp.register_callback_query_handler(my_cart, text_contains="my_cart")
    dp.register_callback_query_handler(check_pay, text_contains="pre_finish_order")
    dp.register_callback_query_handler(pay_cash, text_contains="pay_cash", state=None)
    dp.register_message_handler(pay_cash_name, state=states.OrderItems.Name)
    dp.register_message_handler(pay_cash_phone, state=states.OrderItems.Phone)
    dp.register_message_handler(pay_cash_adress, state=states.OrderItems.Adress)
    dp.register_callback_query_handler(pay_card_cur, text='pay_card_cur')
    dp.register_message_handler(pay_card_name, state=states.OrderCard.Name_card)
    dp.register_message_handler(pay_card_phone, state=states.OrderCard.Phone_card)
    dp.register_message_handler(pay_card_adress, state=states.OrderCard.Adress_card)
    dp.register_shipping_query_handler(choose_shipping_city)
    dp.register_callback_query_handler(pay, text_contains="pay_card")
    dp.register_pre_checkout_query_handler(checkout)
